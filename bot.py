import pickle
import sqlite3
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer

# Carrega modelo treinado
with open("modelo.pkl", "rb") as f:
    vectorizer, modelo = pickle.load(f)

lemmatizer = WordNetLemmatizer()

def preprocess(text):
    tokens = word_tokenize(text.lower())
    lemas = [lemmatizer.lemmatize(token, pos='v') for token in tokens]
    return " ".join(lemas)

def responder(intencao, texto):
    conn = sqlite3.connect("carros.db")
    cursor = conn.cursor()

    if intencao == "modelo":
        for palavra in texto.lower().split():
            cursor.execute("SELECT * FROM carros WHERE LOWER(modelo) LIKE ?", ('%' + palavra + '%',))
            carro = cursor.fetchone()
            if carro:
                cursor.execute("SELECT opcional FROM opcionais WHERE carro_id = ?", (carro[0],))
                opcionais = [r[0] for r in cursor.fetchall()]
                return f"""üì∏ {carro[1]}
üöó {carro[2]} - {carro[3]} ({carro[4]})
üìÖ Ano/Modelo: {carro[5]}
üí∏ Pre√ßo: R$ {carro[6]}
üìç KM: {carro[7]}
üîß Opcionais: {", ".join(opcionais)}"""

        return "‚ùå N√£o encontrei esse modelo."

    elif intencao == "preco":
        numeros = [int(s) for s in texto.split() if s.isdigit()]
        if numeros:
            limite = max(numeros)
            cursor.execute("SELECT * FROM carros WHERE CAST(REPLACE(preco, '.', '') AS INTEGER) <= ?", (limite,))
            carros = cursor.fetchall()
            if carros:
                respostas = []
                for carro in carros[:3]:  # limitar resposta
                    respostas.append(f"{carro[2]} - R$ {carro[6]}")
                return "üí∞ Carros encontrados:\n" + "\n".join(respostas)
            else:
                return "N√£o encontrei carros nesse valor."
        return "Informe um valor num√©rico."

    elif intencao == "opcionais":
        palavras = texto.lower().split()
        cursor.execute("SELECT c.titulo, o.opcional FROM carros c JOIN opcionais o ON c.id = o.carro_id")
        resultados = cursor.fetchall()
        encontrados = [r[0] for r in resultados if any(p in r[1].lower() for p in palavras)]
        if encontrados:
            return "üß∞ Carros com esse opcional: " + ", ".join(set(encontrados))
        return "‚ùå Nenhum carro com esse opcional."

    elif intencao == "saudacao":
        return "Ol√°! Em que posso te ajudar? Voc√™ pode perguntar por modelo, pre√ßo ou opcionais."

    elif intencao == "despedida":
        return "At√© logo! Qualquer coisa, estou por aqui."

    return "Desculpe, n√£o entendi."

# Loop principal
while True:
    entrada = input("Voc√™: ")
    if entrada.lower() in ["sair", "exit", "tchau"]:
        print("Bot: At√© mais!")
        break

    entrada_proc = preprocess(entrada)
    entrada_vec = vectorizer.transform([entrada_proc])
    intencao = modelo.predict(entrada_vec)[0]
    resposta = responder(intencao, entrada)
    print("Bot:", resposta)
