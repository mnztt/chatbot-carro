import pickle
import sqlite3
import re
import random
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer

# Carrega modelo e encoder de inten√ß√µes
with open("modelo.pkl", "rb") as f:
    modelo_emb, modelo_clf, label_encoder = pickle.load(f)

lemmatizer = WordNetLemmatizer()
ultimo_carro = None  # Mem√≥ria de curto prazo

def preprocess(text):
    tokens = word_tokenize(text.lower())
    lemas = [lemmatizer.lemmatize(token, pos='v') for token in tokens]
    return " ".join(lemas)

def responder(intencao, texto):
    global ultimo_carro
    conn = sqlite3.connect("carros.db")
    cursor = conn.cursor()

    if intencao in ["modelo", "busca_modelo"]:
        for palavra in texto.lower().split():
            cursor.execute("SELECT * FROM veiculos WHERE LOWER(modelo) LIKE ?", ('%' + palavra + '%',))
            carro = cursor.fetchone()
            if carro:
                ultimo_carro = carro
                cursor.execute("SELECT opcional FROM opcionais WHERE veiculo_id = ?", (carro[0],))
                opcionais = [r[0] for r in cursor.fetchall()]
                return f"""üì∏ {carro[1]}
üöó {carro[2]} - {carro[3]} ({carro[4]})
üìÖ Ano/Modelo: {carro[4]}
üí∏ Pre√ßo: R$ {carro[5]}
üìç KM: {carro[6]}
üîß Opcionais: {", ".join(opcionais) if opcionais else "Nenhum"}"""

        return "‚ùå N√£o encontrei esse modelo."

    elif intencao in ["preco", "busca_preco"]:
        numeros = [int(s) for s in texto.split() if s.isdigit()]
        if numeros:
            limite = max(numeros)
            cursor.execute("SELECT * FROM veiculos")
            carros = cursor.fetchall()
            encontrados = []
            for carro in carros:
                try:
                    preco_str = re.sub(r"[^\d]", "", carro[5])
                    preco = int(preco_str)
                    if preco <= limite:
                        encontrados.append(f"{carro[2]} - R$ {carro[5]}")
                except ValueError:
                    continue
            if encontrados:
                return "üí∞ Carros encontrados:\n" + "\n".join(encontrados[:3])
            else:
                return "‚ùå N√£o encontrei carros nesse valor."
        return "Informe um valor num√©rico."

    elif intencao == "busca_opcional":
        if not ultimo_carro:
            return "‚ùì Me diga qual carro voc√™ est√° interessado antes de perguntar sobre os opcionais."

        cursor.execute("SELECT opcional FROM opcionais WHERE veiculo_id = ?", (ultimo_carro[0],))
        opcionais = [r[0].lower() for r in cursor.fetchall()]
        palavras = texto.lower().split()

        encontrados = []
        for palavra in palavras:
            for opcional in opcionais:
                if palavra in opcional:
                    encontrados.append(opcional)

        if encontrados:
            return f"‚úÖ Sim, esse carro possui: {', '.join(set(encontrados))}"
        return "‚ùå Esse carro n√£o possui esse opcional (ou o nome est√° diferente)."

    elif intencao == "interesse_compra":
        respostas = [
            "√ìtimo! Me envie seu CPF para calcular entrada e parcelas. üòä",
            "Perfeito, fico feliz que tenha gostado! Me envia seu CPF pra simular o financiamento.",
            "Show! Me passa seu CPF pra eu calcular a entrada e as parcelas pra voc√™.",
        ]
        if ultimo_carro:
            return random.choice(respostas)
        return "Qual carro voc√™ gostou? Me diga o modelo."

    elif intencao == "cpf":
        if ultimo_carro:
            try:
                preco_str = ultimo_carro[5].replace(".", "").replace(",", ".")
                preco = float(preco_str)
                entrada = preco * 0.10
                parcela = (preco - entrada) / 36
                return f"""‚úÖ Simula√ß√£o para {ultimo_carro[2]}:
üìÑ CPF: {texto}
üí∏ Entrada: R$ {entrada:,.2f}
üìÜ Parcelas: 36x de R$ {parcela:,.2f}"""
            except ValueError:
                return "Erro ao calcular parcelas. Verifique os dados do carro."
        return "Por favor, selecione um carro antes de enviar o CPF."

    elif intencao == "saudacao":
        respostas = [
            "Ol√°! Em que posso te ajudar? Voc√™ pode perguntar por modelo, pre√ßo ou opcionais.",
            "Oi! Quer ver algum modelo espec√≠fico?",
            "E a√≠! Est√° procurando algum carro em especial?",
            "Ol√°! Me diga o que voc√™ est√° buscando: modelo, valor ou opcionais?",
            "Oi! Pode me perguntar sobre carros, valores ou caracter√≠sticas.",
            "Seja bem-vindo! Me diga como posso te ajudar com os ve√≠culos."
        ]
        return random.choice(respostas)

    elif intencao == "despedida":
        respostas = [
            "At√© logo! Qualquer coisa, estou por aqui.",
            "Tchau! Volte sempre que quiser ver mais carros.",
            "At√© mais! Foi um prazer te ajudar.",
            "Falou! Espero que encontre o carro ideal.",
            "Nos vemos em breve! üòä"
        ]
        return random.choice(respostas)

    return "Desculpe, n√£o entendi."

# Exporta√ß√µes para uso externo (como no app.py)
__all__ = ["modelo_emb", "modelo_clf", "label_encoder", "preprocess", "responder"]
